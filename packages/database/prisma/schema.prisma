// Nakksha Consulting Platform - Complete Database Schema
// Implements full schema from day 1 as per CTO decision
// Supports consultant admin approval workflow and all core features

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE USER MANAGEMENT
// ============================================================================

// Consultants - Main users who provide consulting services
// Note: requires admin approval before accessing dashboard
model Consultant {
  id                    String   @id @default(cuid())
  email                 String   @unique
  passwordHash          String   @map("password_hash")
  
  // Basic Profile Information
  firstName             String   @map("first_name")
  lastName              String   @map("last_name") 
  phoneCountryCode      String   @default("+91") @map("phone_country_code")
  phoneNumber           String   @map("phone_number")
  profilePhotoUrl       String?  @map("profile_photo_url")
  consultancySector     String?  @map("consultancy_sector")
  
  // Banking Information (encrypted in application layer)
  bankName              String?  @map("bank_name")
  accountNumber         String?  @map("account_number") 
  ifscCode              String?  @map("ifsc_code")
  
  // Service Configuration
  personalSessionTitle       String?  @map("personal_session_title")
  personalSessionDescription  String?  @map("personal_session_description")
  webinarSessionTitle         String?  @map("webinar_session_title") 
  webinarSessionDescription   String?  @map("webinar_session_description")
  description                 String?  // General bio description
  experienceMonths            Int      @default(0) @map("experience_months")
  personalSessionPrice Decimal? @map("personal_session_price") @db.Decimal(10,2)
  webinarSessionPrice  Decimal? @map("webinar_session_price") @db.Decimal(10,2)
  
  // Social Media Links
  instagramUrl          String?  @map("instagram_url")
  linkedinUrl           String?  @map("linkedin_url")
  xUrl                  String?  @map("x_url")
  
  // Account Status & Approval
  isEmailVerified       Boolean  @default(false) @map("is_email_verified")
  isApprovedByAdmin     Boolean  @default(false) @map("is_approved_by_admin") // KEY: Admin approval required
  isActive              Boolean  @default(true) @map("is_active")
  profileCompleted      Boolean  @default(false) @map("profile_completed")
  
  // Subscription Information
  subscriptionPlan      String   @default("free")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  
  // Dynamic URL slug for consultant pages
  slug                  String   @unique // Generated from name
  
  // Email Verification & Password Reset Tokens
  emailVerificationToken        String?   @map("email_verification_token")
  emailVerificationTokenExpires DateTime? @map("email_verification_token_expires")
  passwordResetToken           String?   @map("password_reset_token")  
  passwordResetTokenExpires    DateTime? @map("password_reset_token_expires")
  
  // Metadata
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  lastLoginAt           DateTime? @map("last_login_at")
  
  // Relationships
  sessions              Session[]
  clients               Client[]
  quotations            Quotation[]
  availabilitySlots     AvailabilitySlot[]
  refreshTokens         RefreshToken[]
  paymentTransactions   PaymentTransaction[]
  
  @@map("consultants")
  @@index([email])
  @@index([slug])
  @@index([isApprovedByAdmin])
  @@index([isActive])
}

// Admin users - Platform administrators
model Admin {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  role         AdminRole @default(ADMIN)
  isActive     Boolean  @default(true) @map("is_active")
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastLoginAt  DateTime? @map("last_login_at")
  
  refreshTokens RefreshToken[]
  
  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

// JWT Refresh Tokens - Secure token management
model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  expiresAt   DateTime @map("expires_at")
  isRevoked   Boolean  @default(false) @map("is_revoked")
  
  // Polymorphic relationship (either consultant or admin)
  consultantId String? @map("consultant_id")
  adminId      String? @map("admin_id")
  
  consultant   Consultant? @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  admin        Admin?      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now()) @map("created_at")
  
  @@map("refresh_tokens")
  @@index([token])
  @@index([expiresAt])
}

// ============================================================================
// CLIENT MANAGEMENT
// ============================================================================

// Clients - People who book sessions with consultants
model Client {
  id           String   @id @default(cuid())
  email        String
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  name         String   // Full name for display
  phoneNumber  String?  @map("phone_number")
  phoneCountryCode String? @default("+91") @map("phone_country_code")
  
  // Address Information
  address      String?
  city         String?
  state        String?
  country      String?  @default("India")
  
  // Status and Analytics
  isActive     Boolean  @default(true) @map("is_active")
  totalSessions Int     @default(0) @map("total_sessions")
  totalAmountPaid Decimal @default(0) @db.Decimal(10,2) @map("total_amount_paid")
  
  // Client belongs to specific consultant
  consultantId String   @map("consultant_id")
  consultant   Consultant @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relationships
  sessions     Session[]
  paymentTransactions PaymentTransaction[]
  
  @@map("clients")
  @@unique([email, consultantId]) // Same email can book with different consultants
  @@index([consultantId])
  @@index([email])
}

// ============================================================================
// SESSION MANAGEMENT
// ============================================================================

// Sessions - Core business entity representing consultant-client meetings
model Session {
  id                String      @id @default(cuid())
  
  // Relationships
  consultantId      String      @map("consultant_id")
  clientId          String      @map("client_id")
  consultant        Consultant  @relation(fields: [consultantId], references: [id], onDelete: Restrict)
  client            Client      @relation(fields: [clientId], references: [id], onDelete: Restrict)
  
  // Session Details
  title             String
  description       String?
  sessionType       SessionType @map("session_type")
  status            SessionStatus @default(PENDING)
  
  // Scheduling
  scheduledDate     DateTime    @map("scheduled_date")
  scheduledTime     String      @map("scheduled_time") // Format: "HH:MM"
  duration          Int         @default(60) // Duration in minutes
  durationMinutes   Int         @default(60) @map("duration_minutes") // Alias for compatibility
  timezone          String      @default("Asia/Kolkata")
  
  // Meeting Information
  meetingId         String?     @map("meeting_id")
  meetingLink       String?     @map("meeting_link")
  meetingPassword   String?     @map("meeting_password")
  platform          String?     @default("zoom") // zoom, meet, teams
  
  // Financial
  amount            Decimal     @db.Decimal(10,2)
  currency          String      @default("INR")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  paymentMethod     String?     @map("payment_method") // razorpay, stripe, etc
  paymentId         String?     @map("payment_id") // Razorpay payment ID
  
  // Additional Information
  clientNotes       String?     @map("client_notes") // Notes from client during booking
  consultantNotes   String?     @map("consultant_notes") // Internal notes
  notes             String?     // General notes field
  reminderSent      Boolean     @default(false) @map("reminder_sent") // Reminder email sent
  bookingSource     String?     @map("booking_source") // Track booking source: naksha_platform, manually_added
  
  // Metadata
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  completedAt       DateTime?   @map("completed_at")
  cancelledAt       DateTime?   @map("cancelled_at")
  
  // Relationships
  paymentTransactions PaymentTransaction[]
  
  @@map("sessions")
  @@index([consultantId])
  @@index([clientId])
  @@index([status])
  @@index([paymentStatus])
  @@index([scheduledDate])
  @@index([sessionType])
}

enum SessionType {
  PERSONAL      // 1-on-1 sessions
  WEBINAR       // Group webinar sessions
}

enum SessionStatus {
  PENDING       // Awaiting payment/confirmation
  CONFIRMED     // Payment successful, scheduled
  IN_PROGRESS   // Currently in progress
  ONGOING       // Currently in progress (alias)
  COMPLETED     // Successfully completed
  CANCELLED     // Cancelled by client or consultant
  NO_SHOW       // Client didn't attend
  RETURNED      // Payment returned/refunded
}

enum PaymentStatus {
  PENDING       // Payment not initiated
  PROCESSING    // Payment in progress
  PAID          // Payment successful
  FAILED        // Payment failed
  REFUNDED      // Payment refunded
}

// ============================================================================
// AVAILABILITY MANAGEMENT
// ============================================================================

// Availability Slots - When consultants are available for sessions
model AvailabilitySlot {
  id           String      @id @default(cuid())
  
  consultantId String      @map("consultant_id")
  consultant   Consultant  @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  
  // Slot Details
  sessionType  SessionType @map("session_type")
  date         DateTime    // Available date
  startTime    String      @map("start_time") // Format: "HH:MM"
  endTime      String      @map("end_time")   // Format: "HH:MM"
  
  // Slot Status
  isBooked     Boolean     @default(false) @map("is_booked")
  isBlocked    Boolean     @default(false) @map("is_blocked") // Manually blocked by consultant
  sessionId    String?     @map("session_id") // Link to session if booked
  
  // Metadata
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  @@map("availability_slots")
  @@unique([consultantId, sessionType, date, startTime]) // Prevent duplicate slots
  @@index([consultantId])
  @@index([date])
  @@index([sessionType])
  @@index([isBooked])
}

// ============================================================================
// QUOTATION MANAGEMENT
// ============================================================================

// Quotations - Formal quotes sent to potential clients
model Quotation {
  id              String          @id @default(cuid())
  
  consultantId    String          @map("consultant_id")
  consultant      Consultant      @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  
  // Client Information
  clientName      String          @map("client_name")
  clientEmail     String          @map("client_email")
  clientCompany   String?         @map("client_company")
  
  // Quotation Details
  title           String
  quotationName   String          @map("quotation_name") // Alias for title
  description     String
  baseAmount      Decimal         @db.Decimal(10,2) @map("base_amount")
  discountPercentage Decimal      @default(0) @db.Decimal(5,2) @map("discount_percentage")
  finalAmount     Decimal         @db.Decimal(10,2) @map("final_amount") // Calculated: baseAmount - (baseAmount * discountPercentage / 100)
  amount          Decimal         @db.Decimal(10,2) // Alias for finalAmount for compatibility
  currency        String          @default("INR")
  validUntil      DateTime        @map("valid_until")
  expiresAt       DateTime        @map("expires_at") // Alias for validUntil
  
  // Status
  status          QuotationStatus @default(DRAFT)
  
  // Terms & Conditions
  terms           String?
  notes           String?
  
  // Additional Fields
  quotationImageUrl String?        @map("quotation_image_url")
  viewCount       Int             @default(0) @map("view_count")
  
  // Metadata
  quotationNumber String          @unique @map("quotation_number") // Auto-generated
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  sentAt          DateTime?       @map("sent_at")
  acceptedAt      DateTime?       @map("accepted_at")
  rejectedAt      DateTime?       @map("rejected_at")
  respondedAt     DateTime?       @map("responded_at")
  
  // Relationships
  paymentTransactions PaymentTransaction[]
  
  @@map("quotations")
  @@index([consultantId])
  @@index([status])
  @@index([clientEmail])
  @@index([validUntil])
}

enum QuotationStatus {
  DRAFT         // Being prepared
  SENT          // Sent to client
  VIEWED        // Client has viewed
  ACCEPTED      // Client accepted
  REJECTED      // Client rejected
  EXPIRED       // Validity period expired
}

// ============================================================================
// PAYMENT MANAGEMENT  
// ============================================================================

// Payment Transactions - Track all payment transactions
model PaymentTransaction {
  id                String        @id @default(cuid())
  
  // Related entities
  sessionId         String?       @map("session_id")
  quotationId       String?       @map("quotation_id")
  consultantId      String        @map("consultant_id")
  clientId          String?       @map("client_id")
  
  session           Session?      @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  quotation         Quotation?    @relation(fields: [quotationId], references: [id], onDelete: SetNull)
  consultant        Consultant    @relation(fields: [consultantId], references: [id], onDelete: Restrict)
  client            Client?       @relation(fields: [clientId], references: [id], onDelete: SetNull)
  
  // Payment Details
  amount            Decimal       @db.Decimal(10,2)
  currency          String        @default("INR")
  paymentMethod     String?       @map("payment_method") // razorpay, stripe, etc
  
  // External Payment Gateway Information
  gatewayPaymentId  String?       @map("gateway_payment_id") // Razorpay payment ID
  gatewayOrderId    String?       @map("gateway_order_id")   // Razorpay order ID
  gatewaySignature  String?       @map("gateway_signature")  // Payment signature for verification
  gatewayResponse   Json?         @map("gateway_response")   // Full gateway response for debugging
  clientEmail       String?       @map("client_email")       // Client email for reference
  
  // Transaction Status and Details
  status            PaymentTransactionStatus @default(PENDING)
  transactionType   String        @map("transaction_type") // payment, refund, partial_refund
  description       String?
  failureReason     String?       @map("failure_reason")
  
  // Metadata
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  processedAt       DateTime?     @map("processed_at")
  
  @@map("payment_transactions")
  @@index([sessionId])
  @@index([quotationId])
  @@index([consultantId])
  @@index([status])
  @@index([gatewayPaymentId])
}

enum PaymentTransactionStatus {
  PENDING           // Transaction initiated
  PROCESSING        // Being processed by gateway
  SUCCESS           // Successfully completed
  COMPLETED         // Completed (alias for SUCCESS)
  FAILED            // Transaction failed
  CANCELLED         // User cancelled
  REFUNDED          // Money refunded
  PARTIALLY_REFUNDED // Partially refunded
}

// ============================================================================
// ANALYTICS & REPORTING
// ============================================================================

// Daily Analytics - Aggregated daily metrics for performance
model DailyAnalytics {
  id                    String   @id @default(cuid())
  
  consultantId          String   @map("consultant_id")
  date                  DateTime @db.Date
  
  // Session Metrics
  totalSessions         Int      @default(0) @map("total_sessions")
  completedSessions     Int      @default(0) @map("completed_sessions")
  cancelledSessions     Int      @default(0) @map("cancelled_sessions")
  noShowSessions        Int      @default(0) @map("no_show_sessions")
  
  // Revenue Metrics
  totalRevenue          Decimal  @default(0) @db.Decimal(10,2) @map("total_revenue")
  personalSessionRevenue Decimal @default(0) @db.Decimal(10,2) @map("personal_session_revenue")
  webinarSessionRevenue Decimal  @default(0) @db.Decimal(10,2) @map("webinar_session_revenue")
  
  // Client Metrics
  newClients            Int      @default(0) @map("new_clients")
  uniqueClients         Int      @default(0) @map("unique_clients")
  
  // Quotation Metrics
  quotationsSent        Int      @default(0) @map("quotations_sent")
  quotationsAccepted    Int      @default(0) @map("quotations_accepted")
  
  // Metadata
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  @@map("daily_analytics")
  @@unique([consultantId, date])
  @@index([consultantId])
  @@index([date])
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

// System Settings - Platform-wide configuration
model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("system_settings")
  @@index([category])
}

// Email Templates - Transactional email templates
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String   @map("html_content")
  textContent String?  @map("text_content")
  
  // Template Variables
  variables   Json     // JSON array of variable names
  
  isActive    Boolean  @default(true) @map("is_active")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("email_templates")
}

// Email Logs - Track email sending status for monitoring and retries
model EmailLog {
  id           String     @id @default(cuid())
  
  // Email Details
  to           String
  recipientEmail String  @map("recipient_email") // Alias for to
  from         String?
  subject      String
  templateName String?    @map("template_name")
  emailType    String?    @map("email_type") // welcome, reminder, etc
  
  // Status Tracking
  status       EmailStatus @default(PENDING)
  errorMessage String?    @map("error_message")
  sentAt       DateTime?  @map("sent_at")
  
  // Metadata
  consultantId String?    @map("consultant_id") // Who triggered this email
  clientId     String?    @map("client_id")     // Related client if applicable
  sessionId    String?    @map("session_id")    // Related session if applicable
  
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  @@map("email_logs")
  @@index([status])
  @@index([createdAt])
  @@index([consultantId])
}

enum EmailStatus {
  PENDING       // Email queued for sending
  SENT          // Email sent successfully
  FAILED        // Email failed to send
  QUEUED        // Email queued for retry
}